"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.html = html;
exports.svg = svg;

var _define = _interopRequireDefault(require("../define"));

var _core = require("./core");

var _resolve = _interopRequireDefault(require("./resolve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PLACEHOLDER = (0, _core.getPlaceholder)();
var templatesMap = new Map();
var stylesMap = new WeakMap();
var helpers = {
  define: function define(elements) {
    (0, _define.default)(elements);
    return this;
  },
  key: function key(id) {
    this.id = id;
    return this;
  },
  style: function style() {
    for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
      styles[_key] = arguments[_key];
    }

    stylesMap.set(this, styles);
    return this;
  }
};

function create(parts, args, isSVG) {
  var fn = function fn(host) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : host;
    var styles = stylesMap.get(fn);
    var id = "".concat(parts.join(PLACEHOLDER)).concat(styles ? styles.join(PLACEHOLDER) : '').concat(isSVG ? 'svg' : '');
    var render = templatesMap.get(id);

    if (!render) {
      render = (0, _core.compile)(parts, isSVG, styles);
      templatesMap.set(id, render);
    }

    render(host, target, args);
  };

  return Object.assign(fn, helpers);
}

function html(parts) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return create(parts, args);
}

function svg(parts) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return create(parts, args, true);
}

Object.assign(html, {
  resolve: _resolve.default
});
Object.assign(svg, {
  resolve: _resolve.default
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJQTEFDRUhPTERFUiIsInRlbXBsYXRlc01hcCIsIk1hcCIsInN0eWxlc01hcCIsIldlYWtNYXAiLCJoZWxwZXJzIiwiZGVmaW5lIiwiZWxlbWVudHMiLCJrZXkiLCJpZCIsInN0eWxlIiwic3R5bGVzIiwic2V0IiwiY3JlYXRlIiwicGFydHMiLCJhcmdzIiwiaXNTVkciLCJmbiIsImhvc3QiLCJ0YXJnZXQiLCJnZXQiLCJqb2luIiwicmVuZGVyIiwiT2JqZWN0IiwiYXNzaWduIiwiaHRtbCIsInN2ZyIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsMkJBQXBCO0FBRUEsSUFBTUMsWUFBWSxHQUFHLElBQUlDLEdBQUosRUFBckI7QUFDQSxJQUFNQyxTQUFTLEdBQUcsSUFBSUMsT0FBSixFQUFsQjtBQUVBLElBQU1DLE9BQU8sR0FBRztBQUNkQyxFQUFBQSxNQURjLGtCQUNQQyxRQURPLEVBQ0c7QUFDZix5QkFBZUEsUUFBZjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBSmE7QUFLZEMsRUFBQUEsR0FMYyxlQUtWQyxFQUxVLEVBS047QUFDTixTQUFLQSxFQUFMLEdBQVVBLEVBQVY7QUFDQSxXQUFPLElBQVA7QUFDRCxHQVJhO0FBU2RDLEVBQUFBLEtBVGMsbUJBU0c7QUFBQSxzQ0FBUkMsTUFBUTtBQUFSQSxNQUFBQSxNQUFRO0FBQUE7O0FBQ2ZSLElBQUFBLFNBQVMsQ0FBQ1MsR0FBVixDQUFjLElBQWQsRUFBb0JELE1BQXBCO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7QUFaYSxDQUFoQjs7QUFlQSxTQUFTRSxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQ2xDLE1BQU1DLEVBQUUsR0FBRyxTQUFMQSxFQUFLLENBQUNDLElBQUQsRUFBeUI7QUFBQSxRQUFsQkMsTUFBa0IsdUVBQVRELElBQVM7QUFDbEMsUUFBTVAsTUFBTSxHQUFHUixTQUFTLENBQUNpQixHQUFWLENBQWNILEVBQWQsQ0FBZjtBQUNBLFFBQU1SLEVBQUUsYUFBTUssS0FBSyxDQUFDTyxJQUFOLENBQVdyQixXQUFYLENBQU4sU0FBZ0NXLE1BQU0sR0FBR0EsTUFBTSxDQUFDVSxJQUFQLENBQVlyQixXQUFaLENBQUgsR0FBOEIsRUFBcEUsU0FBeUVnQixLQUFLLEdBQUcsS0FBSCxHQUFXLEVBQXpGLENBQVI7QUFFQSxRQUFJTSxNQUFNLEdBQUdyQixZQUFZLENBQUNtQixHQUFiLENBQWlCWCxFQUFqQixDQUFiOztBQUNBLFFBQUksQ0FBQ2EsTUFBTCxFQUFhO0FBQ1hBLE1BQUFBLE1BQU0sR0FBRyxtQkFBUVIsS0FBUixFQUFlRSxLQUFmLEVBQXNCTCxNQUF0QixDQUFUO0FBQ0FWLE1BQUFBLFlBQVksQ0FBQ1csR0FBYixDQUFpQkgsRUFBakIsRUFBcUJhLE1BQXJCO0FBQ0Q7O0FBRURBLElBQUFBLE1BQU0sQ0FBQ0osSUFBRCxFQUFPQyxNQUFQLEVBQWVKLElBQWYsQ0FBTjtBQUNELEdBWEQ7O0FBYUEsU0FBT1EsTUFBTSxDQUFDQyxNQUFQLENBQWNQLEVBQWQsRUFBa0JaLE9BQWxCLENBQVA7QUFDRDs7QUFFTSxTQUFTb0IsSUFBVCxDQUFjWCxLQUFkLEVBQThCO0FBQUEscUNBQU5DLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQUNuQyxTQUFPRixNQUFNLENBQUNDLEtBQUQsRUFBUUMsSUFBUixDQUFiO0FBQ0Q7O0FBRU0sU0FBU1csR0FBVCxDQUFhWixLQUFiLEVBQTZCO0FBQUEscUNBQU5DLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQUNsQyxTQUFPRixNQUFNLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjLElBQWQsQ0FBYjtBQUNEOztBQUVEUSxNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBZCxFQUFvQjtBQUFFRSxFQUFBQSxPQUFPLEVBQVBBO0FBQUYsQ0FBcEI7QUFDQUosTUFBTSxDQUFDQyxNQUFQLENBQWNFLEdBQWQsRUFBbUI7QUFBRUMsRUFBQUEsT0FBTyxFQUFQQTtBQUFGLENBQW5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmluZUVsZW1lbnRzIGZyb20gJy4uL2RlZmluZSc7XG5cbmltcG9ydCB7IGNvbXBpbGUsIGdldFBsYWNlaG9sZGVyIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCByZXNvbHZlIGZyb20gJy4vcmVzb2x2ZSc7XG5cbmNvbnN0IFBMQUNFSE9MREVSID0gZ2V0UGxhY2Vob2xkZXIoKTtcblxuY29uc3QgdGVtcGxhdGVzTWFwID0gbmV3IE1hcCgpO1xuY29uc3Qgc3R5bGVzTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuY29uc3QgaGVscGVycyA9IHtcbiAgZGVmaW5lKGVsZW1lbnRzKSB7XG4gICAgZGVmaW5lRWxlbWVudHMoZWxlbWVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBrZXkoaWQpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHN0eWxlKC4uLnN0eWxlcykge1xuICAgIHN0eWxlc01hcC5zZXQodGhpcywgc3R5bGVzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZShwYXJ0cywgYXJncywgaXNTVkcpIHtcbiAgY29uc3QgZm4gPSAoaG9zdCwgdGFyZ2V0ID0gaG9zdCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlcyA9IHN0eWxlc01hcC5nZXQoZm4pO1xuICAgIGNvbnN0IGlkID0gYCR7cGFydHMuam9pbihQTEFDRUhPTERFUil9JHtzdHlsZXMgPyBzdHlsZXMuam9pbihQTEFDRUhPTERFUikgOiAnJ30ke2lzU1ZHID8gJ3N2ZycgOiAnJ31gO1xuXG4gICAgbGV0IHJlbmRlciA9IHRlbXBsYXRlc01hcC5nZXQoaWQpO1xuICAgIGlmICghcmVuZGVyKSB7XG4gICAgICByZW5kZXIgPSBjb21waWxlKHBhcnRzLCBpc1NWRywgc3R5bGVzKTtcbiAgICAgIHRlbXBsYXRlc01hcC5zZXQoaWQsIHJlbmRlcik7XG4gICAgfVxuXG4gICAgcmVuZGVyKGhvc3QsIHRhcmdldCwgYXJncyk7XG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZm4sIGhlbHBlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHRtbChwYXJ0cywgLi4uYXJncykge1xuICByZXR1cm4gY3JlYXRlKHBhcnRzLCBhcmdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN2ZyhwYXJ0cywgLi4uYXJncykge1xuICByZXR1cm4gY3JlYXRlKHBhcnRzLCBhcmdzLCB0cnVlKTtcbn1cblxuT2JqZWN0LmFzc2lnbihodG1sLCB7IHJlc29sdmUgfSk7XG5PYmplY3QuYXNzaWduKHN2ZywgeyByZXNvbHZlIH0pO1xuIl19