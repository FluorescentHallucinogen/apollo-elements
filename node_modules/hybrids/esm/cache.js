import { stringifyElement } from './utils';
var entries = new WeakMap();
export function getEntry(target, key) {
  var targetMap = entries.get(target);

  if (!targetMap) {
    targetMap = new Map();
    entries.set(target, targetMap);
  }

  var entry = targetMap.get(key);

  if (!entry) {
    entry = {
      target: target,
      key: key,
      value: undefined,
      deps: new Set(),
      state: 1,
      checksum: 0
    };
    targetMap.set(key, entry);
  }

  return entry;
}

function calculateChecksum(_ref) {
  var state = _ref.state,
      deps = _ref.deps;
  var checksum = state;
  deps.forEach(function (entry) {
    // eslint-disable-next-line no-unused-expressions
    entry.target[entry.key];
    checksum += entry.state;
  });
  return checksum;
}

var context = null;
export function get(target, key, getter) {
  var entry = getEntry(target, key);

  if (context === entry) {
    context = null;
    throw Error("Circular '".concat(key, "' get invocation in '").concat(stringifyElement(target), "'"));
  }

  if (context) {
    context.deps.add(entry);
  }

  var parentContext = context;
  context = entry;

  if (entry.checksum && entry.checksum === calculateChecksum(entry)) {
    context = parentContext;
    return entry.value;
  }

  entry.deps.clear();

  try {
    var nextValue = getter(target, entry.value);

    if (nextValue !== entry.value) {
      entry.state += 1;
      entry.value = nextValue;
    }

    entry.checksum = calculateChecksum(entry);
    context = parentContext;
  } catch (e) {
    context = null;
    throw e;
  }

  return entry.value;
}
export function set(target, key, setter, value, callback) {
  if (context) {
    context = null;
    throw Error("Try to set '".concat(key, "' of '").concat(stringifyElement(target), "' in get call"));
  }

  var entry = getEntry(target, key);
  var newValue = setter(target, value, entry.value);

  if (newValue !== entry.value) {
    entry.state += 1;
    entry.value = newValue;
    callback();
  }
}
export function invalidate(target, key, clearValue) {
  if (context) {
    context = null;
    throw Error("Try to invalidate '".concat(key, "' in '").concat(stringifyElement(target), "' get call"));
  }

  var entry = getEntry(target, key);
  entry.checksum = 0;

  if (clearValue) {
    entry.value = undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jYWNoZS5qcyJdLCJuYW1lcyI6WyJzdHJpbmdpZnlFbGVtZW50IiwiZW50cmllcyIsIldlYWtNYXAiLCJnZXRFbnRyeSIsInRhcmdldCIsImtleSIsInRhcmdldE1hcCIsImdldCIsIk1hcCIsInNldCIsImVudHJ5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJkZXBzIiwiU2V0Iiwic3RhdGUiLCJjaGVja3N1bSIsImNhbGN1bGF0ZUNoZWNrc3VtIiwiZm9yRWFjaCIsImNvbnRleHQiLCJnZXR0ZXIiLCJFcnJvciIsImFkZCIsInBhcmVudENvbnRleHQiLCJjbGVhciIsIm5leHRWYWx1ZSIsImUiLCJzZXR0ZXIiLCJjYWxsYmFjayIsIm5ld1ZhbHVlIiwiaW52YWxpZGF0ZSIsImNsZWFyVmFsdWUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGdCQUFULFFBQWlDLFNBQWpDO0FBRUEsSUFBTUMsT0FBTyxHQUFHLElBQUlDLE9BQUosRUFBaEI7QUFDQSxPQUFPLFNBQVNDLFFBQVQsQ0FBa0JDLE1BQWxCLEVBQTBCQyxHQUExQixFQUErQjtBQUNwQyxNQUFJQyxTQUFTLEdBQUdMLE9BQU8sQ0FBQ00sR0FBUixDQUFZSCxNQUFaLENBQWhCOztBQUNBLE1BQUksQ0FBQ0UsU0FBTCxFQUFnQjtBQUNkQSxJQUFBQSxTQUFTLEdBQUcsSUFBSUUsR0FBSixFQUFaO0FBQ0FQLElBQUFBLE9BQU8sQ0FBQ1EsR0FBUixDQUFZTCxNQUFaLEVBQW9CRSxTQUFwQjtBQUNEOztBQUVELE1BQUlJLEtBQUssR0FBR0osU0FBUyxDQUFDQyxHQUFWLENBQWNGLEdBQWQsQ0FBWjs7QUFFQSxNQUFJLENBQUNLLEtBQUwsRUFBWTtBQUNWQSxJQUFBQSxLQUFLLEdBQUc7QUFDTk4sTUFBQUEsTUFBTSxFQUFOQSxNQURNO0FBRU5DLE1BQUFBLEdBQUcsRUFBSEEsR0FGTTtBQUdOTSxNQUFBQSxLQUFLLEVBQUVDLFNBSEQ7QUFJTkMsTUFBQUEsSUFBSSxFQUFFLElBQUlDLEdBQUos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QUFJa0IsUUFBUSxLQUFLbkIsS0FBSyxDQUFDQyxLQUF2QixFQUE4QjtBQUM1QkQsSUFBQUEsS0FBSyxDQUFDSyxLQUFOLElBQWUsQ0FBZjtBQUNBTCxJQUFBQSxLQUFLLENBQUNDLEtBQU4sR0FBY2tCLFFBQWQ7QUFFQUQsSUFBQUEsUUFBUTtBQUNUO0FBQ0Y7QUFFRCxPQUFPLFNBQVNFLFVBQVQsQ0FBb0IxQixNQUFwQixFQUE0QkMsR0FBNUIsRUFBaUMwQixVQUFqQyxFQUE2QztBQUNsRCxNQUFJWixPQUFKLEVBQWE7QUFDWEEsSUFBQUEsT0FBTyxHQUFHLElBQVY7QUFDQSxVQUFNRSxLQUFLLDhCQUF1QmhCLEdBQXZCLG1CQUFtQ0wsZ0JBQWdCLENBQUNJLE1BQUQsQ0FBbkQsZ0JBQVg7QUFDRDs7QUFFRCxNQUFNTSxLQUFLLEdBQUdQLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTQyxHQUFULENBQXRCO0FBRUFLLEVBQUFBLEtBQUssQ0FBQ00sUUFBTixHQUFpQixDQUFqQjs7QUFFQSxNQUFJZSxVQUFKLEVBQWdCO0FBQ2RyQixJQUFBQSxLQUFLLENBQUNDLEtBQU4sR0FBY0MsU0FBZDtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdpZnlFbGVtZW50IH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGVudHJpZXMgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVudHJ5KHRhcmdldCwga2V5KSB7XG4gIGxldCB0YXJnZXRNYXAgPSBlbnRyaWVzLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1hcCkge1xuICAgIHRhcmdldE1hcCA9IG5ldyBNYXAoKTtcbiAgICBlbnRyaWVzLnNldCh0YXJnZXQsIHRhcmdldE1hcCk7XG4gIH1cblxuICBsZXQgZW50cnkgPSB0YXJnZXRNYXAuZ2V0KGtleSk7XG5cbiAgaWYgKCFlbnRyeSkge1xuICAgIGVudHJ5ID0ge1xuICAgICAgdGFyZ2V0LFxuICAgICAga2V5LFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIGRlcHM6IG5ldyBTZXQoKSxcbiAgICAgIHN0YXRlOiAxLFxuICAgICAgY2hlY2tzdW06IDAsXG4gICAgfTtcbiAgICB0YXJnZXRNYXAuc2V0KGtleSwgZW50cnkpO1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVDaGVja3N1bSh7IHN0YXRlLCBkZXBzIH0pIHtcbiAgbGV0IGNoZWNrc3VtID0gc3RhdGU7XG4gIGRlcHMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgZW50cnkudGFyZ2V0W2VudHJ5LmtleV07XG4gICAgY2hlY2tzdW0gKz0gZW50cnkuc3RhdGU7XG4gIH0pO1xuXG4gIHJldHVybiBjaGVja3N1bTtcbn1cblxubGV0IGNvbnRleHQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGdldCh0YXJnZXQsIGtleSwgZ2V0dGVyKSB7XG4gIGNvbnN0IGVudHJ5ID0gZ2V0RW50cnkodGFyZ2V0LCBrZXkpO1xuXG4gIGlmIChjb250ZXh0ID09PSBlbnRyeSkge1xuICAgIGNvbnRleHQgPSBudWxsO1xuICAgIHRocm93IEVycm9yKGBDaXJjdWxhciAnJHtrZXl9JyBnZXQgaW52b2NhdGlvbiBpbiAnJHtzdHJpbmdpZnlFbGVtZW50KHRhcmdldCl9J2ApO1xuICB9XG5cbiAgaWYgKGNvbnRleHQpIHtcbiAgICBjb250ZXh0LmRlcHMuYWRkKGVudHJ5KTtcbiAgfVxuXG4gIGNvbnN0IHBhcmVudENvbnRleHQgPSBjb250ZXh0O1xuICBjb250ZXh0ID0gZW50cnk7XG5cbiAgaWYgKGVudHJ5LmNoZWNrc3VtICYmIGVudHJ5LmNoZWNrc3VtID09PSBjYWxjdWxhdGVDaGVja3N1bShlbnRyeSkpIHtcbiAgICBjb250ZXh0ID0gcGFyZW50Q29udGV4dDtcbiAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gIH1cblxuICBlbnRyeS5kZXBzLmNsZWFyKCk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBuZXh0VmFsdWUgPSBnZXR0ZXIodGFyZ2V0LCBlbnRyeS52YWx1ZSk7XG5cbiAgICBpZiAobmV4dFZhbHVlICE9PSBlbnRyeS52YWx1ZSkge1xuICAgICAgZW50cnkuc3RhdGUgKz0gMTtcbiAgICAgIGVudHJ5LnZhbHVlID0gbmV4dFZhbHVlO1xuICAgIH1cblxuICAgIGVudHJ5LmNoZWNrc3VtID0gY2FsY3VsYXRlQ2hlY2tzdW0oZW50cnkpO1xuICAgIGNvbnRleHQgPSBwYXJlbnRDb250ZXh0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29udGV4dCA9IG51bGw7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIHJldHVybiBlbnRyeS52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgc2V0dGVyLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgaWYgKGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gbnVsbDtcbiAgICB0aHJvdyBFcnJvcihgVHJ5IHRvIHNldCAnJHtrZXl9JyBvZiAnJHtzdHJpbmdpZnlFbGVtZW50KHRhcmdldCl9JyBpbiBnZXQgY2FsbGApO1xuICB9XG5cbiAgY29uc3QgZW50cnkgPSBnZXRFbnRyeSh0YXJnZXQsIGtleSk7XG4gIGNvbnN0IG5ld1ZhbHVlID0gc2V0dGVyKHRhcmdldCwgdmFsdWUsIGVudHJ5LnZhbHVlKTtcblxuICBpZiAobmV3VmFsdWUgIT09IGVudHJ5LnZhbHVlKSB7XG4gICAgZW50cnkuc3RhdGUgKz0gMTtcbiAgICBlbnRyeS52YWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgY2FsbGJhY2soKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZSh0YXJnZXQsIGtleSwgY2xlYXJWYWx1ZSkge1xuICBpZiAoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBudWxsO1xuICAgIHRocm93IEVycm9yKGBUcnkgdG8gaW52YWxpZGF0ZSAnJHtrZXl9JyBpbiAnJHtzdHJpbmdpZnlFbGVtZW50KHRhcmdldCl9JyBnZXQgY2FsbGApO1xuICB9XG5cbiAgY29uc3QgZW50cnkgPSBnZXRFbnRyeSh0YXJnZXQsIGtleSk7XG5cbiAgZW50cnkuY2hlY2tzdW0gPSAwO1xuXG4gIGlmIChjbGVhclZhbHVlKSB7XG4gICAgZW50cnkudmFsdWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==